## Default values for emqx.
## This is a YAML-formatted file.
## Declare variables to be passed into your templates.

## It is recommended to have odd number of nodes in a cluster, otherwise the emqx cluster cannot be automatically healed in case of net-split.
replicaCount: 3
image:
  repository: emqx/emqx
  pullPolicy: IfNotPresent

## A PersistentVolume (PV) is a piece of storage in the cluster that has been provisioned by an administrator or dynamically provisioned using Storage Classes. It is a resource in the cluster just like a node is a cluster resource. PVs are volume plugins like Volumes, but have a lifecycle independent of any individual Pod that uses the PV. This API object captures the details of the implementation of the storage, be that NFS, iSCSI, or a cloud-provider-specific storage system.
persistence:
  enabled: true
  size: 20Mi
  ## If defined, volume.beta.kubernetes.io/storage-class: <storageClass>
  ## Default: volume.alpha.kubernetes.io/storage-class: default
  # storageClass: "-"
  accessMode: ReadWriteOnce
  ## Existing PersistentVolumeClaims
  ## The value is evaluated as a template
  ## So, for example, the name can depend on .Release or .Chart
  # existingClaim: ""

## When you specify a Pod, you can optionally specify how much CPU and memory (RAM) each Container needs, if you don't specify anything here you'll be assigned some unknown default value
resources:
  limits:
    cpu: 1
    memory: 1G
  requests:
    cpu: 500m
    memory: 512Mi

## EMQX configuration item, see the documentation (https://github.com/emqx/emqx-docker#emq-x-configuration)
emqxConfig:
  #Clouster discovery strategy | manual | static | mcast | dns | etcs | k8s
  EMQX_CLUSTER__K8S__DISCOVERY: k8s
  #List of Kubernetes API servers, separated by ,:
  EMQX_CLUSTER__K8S__APISERVER: "https://kubernetes.default.svc.cluster.local:443"
  ## The address type is used to extract host from k8s service.
  ## Value: ip | dns | hostname
  ## Noteï¼šHostname is only supported after v4.0-rc.2
  EMQX_CLUSTER__K8S__ADDRESS_TYPE: "ip"
  ## if EMQX_CLUSTER__K8S__ADDRESS_TYPE eq dns
  # EMQX_CLUSTER__K8S__SUFFIX: "pod.cluster.local"
  #Services DNS sufix:
  EMQX_CLUSTER__K8S__SUFFIX: "svc.cluster.local"
  #EMQ X node name:
  EMQX_CLUSTER__K8S__APP_NAME: emqx
  #EMQX Dashboard port
  ##EMQX_DASHBOARD__LISTENER__HTTP: "80"

## EMQX Enterprise Edition requires a Secret containing the licensed content. you can add the licence to the blob bellow
##emqxLicneseSecretName: |-
##  test test test

## If you want to manipulate the ACLs you can make changes in the blob bellow
emqxAclConfig: |-
  %%--------------------------------------------------------------------
  %% [ACL](https://docs.emqx.io/broker/v3/en/config.html)
  %%
  %% -type(who() :: all | binary() |
  %%                {ipaddr, esockd_access:cidr()} |
  %%                {client, binary()} |
  %%                {user, binary()}).
  %%
  %% -type(access() :: subscribe | publish | pubsub).
  %%
  %% -type(topic() :: binary()).
  %%
  %% -type(rule() :: {allow, all} |
  %%                 {allow, who(), access(), list(topic())} |
  %%                 {deny, all} |
  %%                 {deny, who(), access(), list(topic())}).
  %%--------------------------------------------------------------------
  %% Allow user 'dashboard'and 'feng@emqtt.io' to subscribe to the spcific topic
  %%{allow, {user, "dashboard"}, subscribe, ["$SYS/#"]}.
  %%{allow, {user, "feng@emqtt.io"}, subscribe, ["$SYS/#"]}.

  %% Allow user 's879atfg' to publish in ANY topic
  {allow, {user, "s879atfg"}, publish, ["#"]}.

  %% Allow local users to publich and subscribe to "$SYS/#" and any other topic
  %%{allow, {ipaddr, "127.0.0.1"}, pubsub, ["$SYS/#", "#"]}.

  %% Allow specific IPs to publich and subscribe to "$SYS/#" and "#" topics
  %%{allow, {ipaddr, "172.16.96.7"}, pubsub, ["$SYS/#" {eq, "#"}]}.
  %%{allow, {ipaddr, "172.16.66.6"}, pubsub, ["$SYS/#" {eq, "#"}]}.

  %% Allow everyone to subscribe to any topic
  {allow, all, subscribe, ["#"]}.

  %% Deny everyone, except local users, subscribsion to "$SYS/#" and "#" topics
  %%{deny, all, subscribe, ["$SYS/#", {eq, "#"}]}.

  %% Allow everything
  %%{allow, all}.

  %% Deny everything
  {deny, all}.

## In order to manage user/passwords for MQTT service you can make changes to the blob bellow
emqxAuthConfig: |-
  ##--------------------------------------------------------------------
  ## Username Authentication Plugin
  ##--------------------------------------------------------------------

  ## Examples:
  auth.user.1.username = s879atfg
  auth.user.1.password = s4do7ihfoa
  #auth.user.2.username = feng@emqtt.io
  #auth.user.2.password = public
  #auth.user.3.username = name~!@#$%^&*()_+
  #auth.user.3.password = pwsswd~!@#$%^&*()_+
  #auth.user.4.username = username
  #auth.user.4.password = abv123

  ## Password hash.
  ##
  ## Value: plain | md5 | sha | sha256
  auth.user.password_hash = sha256

## In order to manage statsd plugin config in EMQX you can make changes to the blob bellow - !!!THE PLUGIN IS MISSING!!!
##emqxStatsdConfig: |-
##  ##--------------------------------------------------------------------
##  ## Statsd for EMQ X
##  ##--------------------------------------------------------------------
##
##  statsd.push.gateway.server = http://127.0.0.1:9091
##
##  statsd.interval = 15000
##
##  prometheus.collector.1 = emqx_statsd

## In order to manage plugins startup in EMQX you can make changes to the blob bellow
emqxPluginConfig: |-
  {emqx_recon,true}.
  {emqx_retainer,true}.
  {emqx_dashboard,true}.
  {emqx_management,true}.
  {emqx_rule_engine,true}.
  {emqx_auth_username,true}.
  {emqx_delayed_publish,false}.
  {emqx_plugin_template,false}.
  {emqx_auth_clientid,false}.
  {emqx_bridge_mqtt,false}.
  {emqx_rule_engine,false}.
  {emqx_bridge_mqtt,false}.
  {emqx_auth_mongo,false}.
  {emqx_auth_mysql,false}.
  {emqx_auth_pgsql,false}.
  {emqx_auth_redis,false}.
  {emqx_auth_ldap,false}.
  {emqx_auth_http,false}.
  {emqx_auth_jwt,false}.
  {emqx_psk_file,false}.
  {emqx_web_hook,false}.
  {emqx_lua_hook,false}.
  {emqx_retainer,false}.
  {emqx_reloader,false}.
  {emqx_statsd,false}.
  {emqx_lwm2m,false}.
  {emqx_stomp,false}.
  {emqx_recon,false}.
  {emqx_coap,false}.
  {emqx_sn,false}.

## You can choose between two Service types - ClusterIP ; LoadBalancer (Internal)
service:
  type: LoadBalancer

## Pre-defined Node selectors that would work in SBTech's clusters
nodeSelector:
  beta.kubernetes.io/os: linux

## Taints and tolerations work together to ensure that pods are not scheduled onto inappropriate nodes.
tolerations: []

## The affinity/anti-affinity feature, greatly expands the types of constraints you can express in comparison to nodeSelector
affinity: {}

## Ingress is only enabled for the Dashboard all other services are accessible trough the SVC IP/DNS and consul. Pleaes update hostname before deploying
ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  path: /
  domainname: exmp-env.example.com
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
